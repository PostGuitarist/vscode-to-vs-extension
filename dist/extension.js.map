{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://vscode-to-vs/./src/guidGenerator.ts","webpack://vscode-to-vs/./src/projectGenerator.ts","webpack://vscode-to-vs/external commonjs \"vscode\"","webpack://vscode-to-vs/external node-commonjs \"fs\"","webpack://vscode-to-vs/external node-commonjs \"path\"","webpack://vscode-to-vs/webpack/bootstrap","webpack://vscode-to-vs/./src/extension.ts"],"sourcesContent":["export function generateGUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0;\n        const v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}","import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { generateGUID } from './guidGenerator';\n\nenum FileType {\n  SOURCE,\n  TEXT,\n  HEADER,\n}\n\ninterface CodeFile {\n  fileType: FileType;\n  fileName: string;\n}\n\nexport function generateVSProjectFiles() {\n  // Get the current project name from the workspace folder\n  const projectName = vscode.workspace.name;\n\n  if (!projectName) {\n    vscode.window.showErrorMessage(\"No workspace is currently open.\");\n    return;\n  }\n\n  // Folder where the project files will be generated\n  const projectDir = path.join(vscode.workspace.rootPath!, projectName);\n  const projectFolder = path.join(projectDir, projectName);\n\n  // Create the folders\n  try {\n    // Create the main directory folder\n    fs.mkdirSync(projectDir, { recursive: true });\n\n    // Create the project folder inside the main directory\n    fs.mkdirSync(projectFolder, { recursive: true });\n  } catch (error) {\n    vscode.window.showErrorMessage(\"Error creating folders.\");\n    return;\n  }\n\n  // Copy the template files\n  try {\n    copyFilesRename(projectFolder, projectDir, projectName);\n  } catch (error) {\n    vscode.window.showErrorMessage(\"Error copying files.\");\n    return;\n  }\n\n  try {\n    replaceIdsInSolutionFile(projectName, projectDir);\n  } catch (error) {\n    vscode.window.showErrorMessage(\"Error replacing IDs.\");\n    return;\n  }\n\n  try {\n    copyFiles(vscode.workspace.rootPath!, projectFolder);\n  } catch (error) {\n    vscode.window.showErrorMessage(\"Error copying main files.\");\n    return;\n  }\n\n  try {\n    appendFileTypesToFilters(projectFolder, projectName);\n  } catch (error) {\n    vscode.window.showErrorMessage(\"Error appending file types to filters.\");\n    return;\n  }\n\n  vscode.window.showInformationMessage(\n    \"Visual Studio project files generated successfully\"\n  );\n}\n\nfunction copyFilesRename(projectFolder: string, projectDir: string, projectName: string) {\n  // Copy the template files\n  const templateDir = path.join(__dirname, \"assets\");\n  fs.readdirSync(templateDir).forEach((file) => {\n    if (file !== \"template.sln\" && file.startsWith(\"template.\")) {\n      fs.copyFileSync(\n        path.join(templateDir, file),\n        path.join(projectFolder, file)\n      );\n    }\n  });\n\n  // Copy the template.sln file to the projectDir\n  const slnFile = \"template.sln\";\n  fs.copyFileSync(\n    path.join(templateDir, slnFile),\n    path.join(projectDir, slnFile)\n  );\n\n  // Rename the template files\n  fs.readdirSync(projectFolder).forEach(file => {\n    if (file.startsWith('template.')) {\n      const newFileName = file.replace('template', projectName);\n      fs.renameSync(path.join(projectFolder, file), path.join(projectFolder, newFileName));\n    }\n  });\n\n  // Rename the template.sln file\n  const oldPath = path.join(projectDir, 'template.sln');\n  const newPath = path.join(projectDir, `${projectName}.sln`);\n  fs.renameSync(oldPath, newPath);\n\n}\n\nfunction replaceIdsInSolutionFile(projectName: string, projectDir: string) {\n  const solutionFilePath = path.join(projectDir, `${projectName}.sln`);\n  let content = fs.readFileSync(solutionFilePath, \"utf-8\");\n\n  content = content.replace(/NAME/g, projectName);\n  content = content.replace(/PROJECTID/g, generateGUID());\n  content = content.replace(/SOLUTIONID/g, generateGUID());\n\n  fs.writeFileSync(solutionFilePath, content, \"utf-8\");\n}\n\nfunction copyFiles(workingDir: string, projectFolder: string) {\n  const extensions = [\n    \".cpp\",\n    \".h\",\n    \".dat\",\n    \".txt\",\n  ];\n\n  fs.readdirSync(workingDir).forEach((file) => {\n    const ext = path.extname(file);\n\n    if (extensions.includes(ext)) {\n      fs.copyFileSync(\n        path.join(workingDir, file),\n        path.join(projectFolder, file)\n      );\n    }\n  });\n}\n\nfunction getFileType(fileName: string): FileType {\n  const ext = path.extname(fileName);\n  switch (ext) {\n    case \".cpp\":\n      return FileType.SOURCE;\n    case \".h\":\n      return FileType.HEADER;\n    case \".dat\":\n    case \".txt\":\n    default:\n      return FileType.TEXT;\n  }\n}\n\nfunction appendFileTypesToFilters(projectFolder: string, projectName: string) {\n  const ignoreFiles = [\n    `${projectName}.vcxproj`,\n    `${projectName}.vcxproj.filters`,\n    `${projectName}.vcxproj.user`,\n  ];\n  const codeFiles: CodeFile[] = fs\n    .readdirSync(projectFolder)\n    .filter((fileName) => !ignoreFiles.includes(fileName))\n    .map((fileName) => ({\n      fileType: getFileType(fileName),\n      fileName: fileName,\n    }));\n\n  let firstPart = \"\";\n  const filters = appendSecondPartFilter(codeFiles, firstPart);\n  const vcxproj = appendSecondPartVcxproj(codeFiles, firstPart);\n\n  fs.appendFileSync(path.join(projectFolder, `${projectName}.vcxproj.filters`), filters);\n  fs.appendFileSync(path.join(projectFolder, `${projectName}.vcxproj`), vcxproj);\n}\n\nfunction appendSecondPartFilter(codeFiles: CodeFile[], firstPart: string): string {\n  let itemGroup = \"\\n  <ItemGroup>\";\n  let compile = itemGroup;\n  let text = itemGroup;\n  let header = itemGroup;\n\n  for (let file of codeFiles) {\n    if (file) {\n      switch (file.fileType) {\n        case FileType.SOURCE:\n          compile += `\\n    <ClCompile Include=\"${file.fileName}\">\\n      <Filter>Source Files</Filter>\\n    </ClCompile>`;\n          break;\n        case FileType.TEXT:\n          text += `\\n    <Text Include=\"${file.fileName}\">\\n      <Filter>Source Files</Filter>\\n    </Text>`;\n          break;\n        case FileType.HEADER:\n          header += `\\n    <ClInclude Include=\"${file.fileName}\">\\n      <Filter>Header Files</Filter>\\n    </ClInclude>`;\n          break;\n      }\n    }\n  }\n\n  if (compile !== itemGroup) {\n    compile += \"\\n  </ItemGroup>\";\n    firstPart += compile;\n  }\n  if (text !== itemGroup) {\n    text += \"\\n  </ItemGroup>\";\n    firstPart += text;\n  }\n  if (header !== itemGroup) {\n    header += \"\\n  </ItemGroup>\";\n    firstPart += header;\n  }\n\n  firstPart += \"\\n</Project>\";\n\n  return firstPart;\n}\n\nfunction appendSecondPartVcxproj(codeFiles: CodeFile[], firstPart: string): string {\n  let itemGroup = \"\\n  <ItemGroup>\";\n  let compile = itemGroup;\n  let text = itemGroup;\n  let header = itemGroup;\n\n  for (let file of codeFiles) {\n    if (file) {\n      switch (file.fileType) {\n        case FileType.SOURCE:\n          compile += `\\n    <ClCompile Include=\"${file.fileName}\" />`;\n          break;\n        case FileType.TEXT:\n          text += `\\n    <Text Include=\"${file.fileName}\" />`;\n          break;\n        case FileType.HEADER:\n          header += `\\n    <ClInclude Include=\"${file.fileName}\" />`;\n          break;\n      }\n    }\n  }\n\n  if (compile !== itemGroup) {\n    compile += \"\\n  </ItemGroup>\";\n    firstPart += compile;\n  }\n\n  if (text !== itemGroup) {\n    text += \"\\n  </ItemGroup>\";\n    firstPart += text;\n  }\n\n  if (header !== itemGroup) {\n    header += \"\\n  </ItemGroup>\";\n    firstPart += header;\n  }\n\n  firstPart += \"\\n  <Import Project=\\\"$(VCTargetsPath)\\\\Microsoft.Cpp.targets\\\" />\\n  <ImportGroup Label=\\\"ExtensionTargets\\\">\\n  </ImportGroup>\\n</Project>\";\n\n  return firstPart;\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport { generateVSProjectFiles } from './projectGenerator';\n\nexport function activate(context: vscode.ExtensionContext) {\n\t// Register the command\n    let disposable = vscode.commands.registerCommand('extension.generateCppSolution', async () => {\n        try {\n            // Run the generateSolutionFiles function\n            generateVSProjectFiles();\n        } catch (error) {\n\t\t\t// Show an error message\n            vscode.window.showErrorMessage(`Error executing: ${error}`);\n        }\n    });\n\n\t// Register the command\n    context.subscriptions.push(disposable);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}"],"names":["replace","c","r","Math","random","toString","FileType","getFileType","fileName","path","extname","SOURCE","HEADER","TEXT","projectName","vscode","workspace","name","window","showErrorMessage","projectDir","join","rootPath","projectFolder","fs","mkdirSync","recursive","error","templateDir","__dirname","readdirSync","forEach","file","startsWith","copyFileSync","slnFile","newFileName","renameSync","oldPath","newPath","copyFilesRename","solutionFilePath","content","readFileSync","generateGUID","writeFileSync","replaceIdsInSolutionFile","workingDir","extensions","ext","includes","copyFiles","ignoreFiles","codeFiles","filter","map","fileType","filters","firstPart","itemGroup","compile","text","header","appendSecondPartFilter","vcxproj","appendSecondPartVcxproj","appendFileSync","appendFileTypesToFilters","showInformationMessage","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","disposable","commands","registerCommand","async","generateVSProjectFiles","subscriptions","push"],"sourceRoot":""}