{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://vscode-to-vs/./src/codeFile.ts","webpack://vscode-to-vs/./src/extension.ts","webpack://vscode-to-vs/./src/guidGenerator.ts","webpack://vscode-to-vs/./src/projectGenerator.ts","webpack://vscode-to-vs/external commonjs \"vscode\"","webpack://vscode-to-vs/external node-commonjs \"fs\"","webpack://vscode-to-vs/external node-commonjs \"path\"","webpack://vscode-to-vs/webpack/bootstrap","webpack://vscode-to-vs/webpack/startup"],"sourcesContent":["export enum FileType {\n  SOURCE,\n  TEXT,\n  HEADER,\n}\n\nexport interface CodeFile {\n  fileType: FileType;\n  fileName: string;\n}\n","import * as vscode from 'vscode';\nimport { generateVSProjectFiles } from './projectGenerator';\n\nexport function activate(context: vscode.ExtensionContext) {\n\tconsole.log('Extension \"vscode-to-vs\" is now active!');\n\n\t// Register the command\n\tconst disposable = vscode.commands.registerCommand('vscode-to-vs.generateCppSolution', async () => {\n\t\ttry {\n\t\t\tgenerateVSProjectFiles();\n\t\t} catch (error) {\n\t\t\tvscode.window.showErrorMessage(`Error generating project files: ${error}`);\n\t\t}\n\t});\n\n\tcontext.subscriptions.push(disposable);\n}\n\n// Called when extension is deactivated\nexport function deactivate() {}\n","export function generateGUID() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0;\n    const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n","import * as vscode from \"vscode\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { generateGUID } from \"./guidGenerator\";\nimport { CodeFile, FileType } from \"./codeFile\";\n\nexport async function generateVSProjectFiles() {\n  // Get the current project name from the workspace folder\n  const inWorkspace = vscode.workspace.name;\n\n  if (!inWorkspace) {\n    vscode.window.showErrorMessage(\"No workspace is currently open.\");\n    return;\n  }\n\n  // Get input from user for the project name\n  const newName = await vscode.window.showInputBox({\n    prompt: \"Enter the project name\",\n    value: vscode.workspace.name,\n  });\n\n  // Folder where the project files will be generated\n  const workspaceFolder = vscode.workspace.workspaceFolders?.[0].uri.fsPath;\n  if (!workspaceFolder) {\n    vscode.window.showErrorMessage(\"No workspace folder found.\");\n    return;\n  }\n  const projectDir = path.join(workspaceFolder, newName!);\n  const projectFolder = path.join(projectDir, newName!);\n\n  // Create the folders\n  try {\n    // Create the main directory folder\n    fs.mkdirSync(projectDir, { recursive: true });\n\n    // Create the project folder inside the main directory\n    fs.mkdirSync(projectFolder, { recursive: true });\n  } catch (error) {\n    vscode.window.showErrorMessage(`Error creating folders: `);\n    return;\n  }\n\n  // Copy the template files\n  try {\n    copyFilesRename(projectFolder, projectDir, newName!);\n  } catch (error) {\n    if (error instanceof Error) {\n\n      // Is this the best way to handle this error? Probably not.\n\n      if (!error.message.includes(\"EPERM\")) {\n        vscode.window.showErrorMessage(`Error copying files: ${error}`);\n        return;\n      } else {\n        return;\n      }\n    }\n  }\n\n  // Replace the IDs in the solution file\n  try {\n    replaceIdsInSolutionFile(newName!, projectDir);\n  } catch (error) {\n    vscode.window.showErrorMessage(`Error replacing IDs: ${error}`);\n    return;\n  }\n\n  // Copy the main files\n  try {\n    copyFiles(workspaceFolder, projectFolder);\n  } catch (error) {\n    if (error instanceof Error) {\n\n      // Is this the best way to handle this error? Probably not.\n\n      if (!error.message.includes(\"EPERM\")) {\n        vscode.window.showErrorMessage(`Error copying main files: ${error}`);\n        return;\n      } else {\n        return;\n      }\n    }\n  }\n\n  // Append the file types to the filters\n  try {\n    appendFileTypesToFilters(projectFolder, newName!);\n  } catch (error) {\n    vscode.window.showErrorMessage(`Error appending file types to filters: ${error}`);\n    return;\n  }\n\n  vscode.window.showInformationMessage(\n    \"Visual Studio project files generated successfully\"\n  );\n}\n\nfunction copyFilesRename(\n  projectFolder: string,\n  projectDir: string,\n  projectName: string\n) {\n  // Copy the template files\n  const templateDir = path.join(__dirname, \"assets\");\n  fs.readdirSync(templateDir).forEach((file) => {\n    if (file !== \"template.sln\" && file.startsWith(\"template.\")) {\n      fs.copyFileSync(\n        path.join(templateDir, file),\n        path.join(projectFolder, file)\n      );\n    }\n  });\n\n  // Copy the template.sln file to the projectDir\n  const slnFile = \"template.sln\";\n  fs.copyFileSync(\n    path.join(templateDir, slnFile),\n    path.join(projectDir, slnFile)\n  );\n\n  // Rename the template files\n  fs.readdirSync(projectFolder).forEach((file) => {\n    if (file.startsWith(\"template.\")) {\n      const newFileName = file.replace(\"template\", projectName);\n      fs.renameSync(\n        path.join(projectFolder, file),\n        path.join(projectFolder, newFileName)\n      );\n    }\n  });\n\n  // Rename the template.sln file\n  const oldPath = path.join(projectDir, \"template.sln\");\n  const newPath = path.join(projectDir, `${projectName}.sln`);\n  fs.renameSync(oldPath, newPath);\n}\n\nfunction replaceIdsInSolutionFile(projectName: string, projectDir: string) {\n  const solutionFilePath = path.join(projectDir, `${projectName}.sln`);\n  let content = fs.readFileSync(solutionFilePath, \"utf-8\");\n\n  content = content.replace(/NAME/g, projectName);\n  content = content.replace(/PROJECTID/g, generateGUID());\n  content = content.replace(/SOLUTIONID/g, generateGUID());\n\n  fs.writeFileSync(solutionFilePath, content, \"utf-8\");\n}\n\nfunction copyFiles(workingDir: string, projectFolder: string) {\n  const extensions = [\".cpp\", \".h\", \".dat\", \".txt\"];\n\n  fs.readdirSync(workingDir).forEach((file) => {\n    const ext = path.extname(file);\n\n    if (extensions.includes(ext)) {\n      fs.copyFileSync(\n        path.join(workingDir, file),\n        path.join(projectFolder, file)\n      );\n    }\n  });\n\n  // Delete the original files\n  fs.readdirSync(workingDir).forEach((file) => {\n    const ext = path.extname(file);\n\n    if (extensions.includes(ext)) {\n      fs.unlinkSync(path.join(workingDir, file));\n    }\n  });\n\n  // Delete the compiled files\n  fs.readdirSync(workingDir).forEach((file) => {\n    const ext = path.extname(file);\n\n    if (ext === \".exe\" || ext === \".obj\" || ext === \"\") {\n      fs.unlinkSync(path.join(workingDir, file));\n    }\n  });\n}\n\nfunction getFileType(fileName: string): FileType {\n  const ext = path.extname(fileName);\n  switch (ext) {\n    case \".cpp\":\n      return FileType.SOURCE;\n    case \".h\":\n      return FileType.HEADER;\n    case \".dat\":\n    case \".txt\":\n    default:\n      return FileType.TEXT;\n  }\n}\n\nfunction appendFileTypesToFilters(projectFolder: string, projectName: string) {\n  const ignoreFiles = [\n    `${projectName}.vcxproj`,\n    `${projectName}.vcxproj.filters`,\n    `${projectName}.vcxproj.user`,\n  ];\n  const codeFiles: CodeFile[] = fs\n    .readdirSync(projectFolder)\n    .filter((fileName) => !ignoreFiles.includes(fileName))\n    .map((fileName) => ({\n      fileType: getFileType(fileName),\n      fileName: fileName,\n    }));\n\n  let firstPart = \"\";\n  const filters = appendSecondPartFilter(codeFiles, firstPart);\n  const vcxproj = appendSecondPartVcxproj(codeFiles, firstPart);\n\n  fs.appendFileSync(\n    path.join(projectFolder, `${projectName}.vcxproj.filters`),\n    filters\n  );\n  fs.appendFileSync(\n    path.join(projectFolder, `${projectName}.vcxproj`),\n    vcxproj\n  );\n}\n\nfunction appendSecondPartFilter(\n  codeFiles: CodeFile[],\n  firstPart: string\n): string {\n  let itemGroup = \"\\n  <ItemGroup>\";\n  let compile = itemGroup;\n  let text = itemGroup;\n  let header = itemGroup;\n\n  for (let file of codeFiles) {\n    if (file) {\n      switch (file.fileType) {\n        case FileType.SOURCE:\n          compile += `\\n    <ClCompile Include=\"${file.fileName}\">\\n      <Filter>Source Files</Filter>\\n    </ClCompile>`;\n          break;\n        case FileType.TEXT:\n          text += `\\n    <Text Include=\"${file.fileName}\">\\n      <Filter>Source Files</Filter>\\n    </Text>`;\n          break;\n        case FileType.HEADER:\n          header += `\\n    <ClInclude Include=\"${file.fileName}\">\\n      <Filter>Header Files</Filter>\\n    </ClInclude>`;\n          break;\n      }\n    }\n  }\n\n  if (compile !== itemGroup) {\n    compile += \"\\n  </ItemGroup>\";\n    firstPart += compile;\n  }\n  if (text !== itemGroup) {\n    text += \"\\n  </ItemGroup>\";\n    firstPart += text;\n  }\n  if (header !== itemGroup) {\n    header += \"\\n  </ItemGroup>\";\n    firstPart += header;\n  }\n\n  firstPart += \"\\n</Project>\";\n\n  return firstPart;\n}\n\nfunction appendSecondPartVcxproj(\n  codeFiles: CodeFile[],\n  firstPart: string\n): string {\n  let itemGroup = \"\\n  <ItemGroup>\";\n  let compile = itemGroup;\n  let text = itemGroup;\n  let header = itemGroup;\n\n  for (let file of codeFiles) {\n    if (file) {\n      switch (file.fileType) {\n        case FileType.SOURCE:\n          compile += `\\n    <ClCompile Include=\"${file.fileName}\" />`;\n          break;\n        case FileType.TEXT:\n          text += `\\n    <Text Include=\"${file.fileName}\" />`;\n          break;\n        case FileType.HEADER:\n          header += `\\n    <ClInclude Include=\"${file.fileName}\" />`;\n          break;\n      }\n    }\n  }\n\n  if (compile !== itemGroup) {\n    compile += \"\\n  </ItemGroup>\";\n    firstPart += compile;\n  }\n\n  if (text !== itemGroup) {\n    text += \"\\n  </ItemGroup>\";\n    firstPart += text;\n  }\n\n  if (header !== itemGroup) {\n    header += \"\\n  </ItemGroup>\";\n    firstPart += header;\n  }\n\n  firstPart +=\n    '\\n  <Import Project=\"$(VCTargetsPath)\\\\Microsoft.Cpp.targets\" />\\n  <ImportGroup Label=\"ExtensionTargets\">\\n  </ImportGroup>\\n</Project>';\n\n  return firstPart;\n}\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["FileType","context","console","log","disposable","vscode","commands","registerCommand","async","generateVSProjectFiles","error","window","showErrorMessage","subscriptions","push","replace","c","r","Math","random","toString","workspace","name","newName","showInputBox","prompt","value","workspaceFolder","workspaceFolders","uri","fsPath","projectDir","path","join","projectFolder","fs","mkdirSync","recursive","projectName","templateDir","__dirname","readdirSync","forEach","file","startsWith","copyFileSync","slnFile","newFileName","renameSync","oldPath","newPath","copyFilesRename","Error","message","includes","solutionFilePath","content","readFileSync","generateGUID","writeFileSync","replaceIdsInSolutionFile","workingDir","extensions","ext","extname","unlinkSync","copyFiles","ignoreFiles","codeFiles","filter","fileName","map","fileType","getFileType","filters","firstPart","itemGroup","compile","text","header","SOURCE","TEXT","HEADER","appendSecondPartFilter","vcxproj","appendSecondPartVcxproj","appendFileSync","appendFileTypesToFilters","showInformationMessage","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}