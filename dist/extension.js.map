{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://vscode-to-vs/./src/codeFile.ts","webpack://vscode-to-vs/./src/guidGenerator.ts","webpack://vscode-to-vs/./src/projectGenerator.ts","webpack://vscode-to-vs/external commonjs \"vscode\"","webpack://vscode-to-vs/external node-commonjs \"fs\"","webpack://vscode-to-vs/external node-commonjs \"path\"","webpack://vscode-to-vs/webpack/bootstrap","webpack://vscode-to-vs/./src/extension.ts"],"sourcesContent":["export enum FileType {\n  SOURCE,\n  TEXT,\n  HEADER,\n}\n\nexport interface CodeFile {\n  fileType: FileType;\n  fileName: string;\n}\n","export function generateGUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0;\n        const v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}","import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { generateGUID } from './guidGenerator';\nimport { CodeFile, FileType } from './codeFile';\n\nexport async function generateVSProjectFiles() {\n  // Get the current project name from the workspace folder\n  const inWorkspace = vscode.workspace.name;\n\n  if (!inWorkspace) {\n    vscode.window.showErrorMessage(\"No workspace is currently open.\");\n    return;\n  }\n\n  // Get input from user for the project name\n  const newName = await vscode.window.showInputBox({\n    prompt: \"Enter the project name\",\n    value: vscode.workspace.name,\n  });\n\n  // Folder where the project files will be generated\n  const projectDir = path.join(vscode.workspace.rootPath!, newName!);\n  const projectFolder = path.join(projectDir, newName!);\n\n  // Create the folders\n  try {\n    // Create the main directory folder\n    fs.mkdirSync(projectDir, { recursive: true });\n\n    // Create the project folder inside the main directory\n    fs.mkdirSync(projectFolder, { recursive: true });\n  } catch (error) {\n    vscode.window.showErrorMessage(\"Error creating folders.\");\n    return;\n  }\n\n  // Copy the template files\n  try {\n    copyFilesRename(projectFolder, projectDir, newName!);\n  } catch (error) {\n    vscode.window.showErrorMessage(\"Error copying files.\");\n    return;\n  }\n\n  // Replace the IDs in the solution file\n  try {\n    replaceIdsInSolutionFile(newName!, projectDir);\n  } catch (error) {\n    vscode.window.showErrorMessage(\"Error replacing IDs.\");\n    return;\n  }\n\n  // Copy the main files\n  try {\n    copyFiles(vscode.workspace.rootPath!, projectFolder);\n  } catch (error) {\n    vscode.window.showErrorMessage(\"Error copying main files.\");\n    return;\n  }\n\n  // Append the file types to the filters\n  try {\n    appendFileTypesToFilters(projectFolder, newName!);\n  } catch (error) {\n    vscode.window.showErrorMessage(\"Error appending file types to filters.\");\n    return;\n  }\n\n  vscode.window.showInformationMessage(\n    \"Visual Studio project files generated successfully\"\n  );\n}\n\nfunction copyFilesRename(projectFolder: string, projectDir: string, projectName: string) {\n  // Copy the template files\n  const templateDir = path.join(__dirname, \"assets\");\n  fs.readdirSync(templateDir).forEach((file) => {\n    if (file !== \"template.sln\" && file.startsWith(\"template.\")) {\n      fs.copyFileSync(\n        path.join(templateDir, file),\n        path.join(projectFolder, file)\n      );\n    }\n  });\n\n  // Copy the template.sln file to the projectDir\n  const slnFile = \"template.sln\";\n  fs.copyFileSync(\n    path.join(templateDir, slnFile),\n    path.join(projectDir, slnFile)\n  );\n\n  // Rename the template files\n  fs.readdirSync(projectFolder).forEach(file => {\n    if (file.startsWith('template.')) {\n      const newFileName = file.replace('template', projectName);\n      fs.renameSync(path.join(projectFolder, file), path.join(projectFolder, newFileName));\n    }\n  });\n\n  // Rename the template.sln file\n  const oldPath = path.join(projectDir, 'template.sln');\n  const newPath = path.join(projectDir, `${projectName}.sln`);\n  fs.renameSync(oldPath, newPath);\n\n}\n\nfunction replaceIdsInSolutionFile(projectName: string, projectDir: string) {\n  const solutionFilePath = path.join(projectDir, `${projectName}.sln`);\n  let content = fs.readFileSync(solutionFilePath, \"utf-8\");\n\n  content = content.replace(/NAME/g, projectName);\n  content = content.replace(/PROJECTID/g, generateGUID());\n  content = content.replace(/SOLUTIONID/g, generateGUID());\n\n  fs.writeFileSync(solutionFilePath, content, \"utf-8\");\n}\n\nfunction copyFiles(workingDir: string, projectFolder: string) {\n  const extensions = [\n    \".cpp\",\n    \".h\",\n    \".dat\",\n    \".txt\",\n  ];\n\n  fs.readdirSync(workingDir).forEach((file) => {\n    const ext = path.extname(file);\n\n    if (extensions.includes(ext)) {\n      fs.copyFileSync(\n        path.join(workingDir, file),\n        path.join(projectFolder, file)\n      );\n    }\n  });\n\n  // Delete the original files\n  fs.readdirSync(workingDir).forEach((file) => {\n    const ext = path.extname(file);\n\n    if (extensions.includes(ext)) {\n      fs.unlinkSync(path.join (workingDir, file));\n    }\n  });\n}\n\nfunction getFileType(fileName: string): FileType {\n  const ext = path.extname(fileName);\n  switch (ext) {\n    case \".cpp\":\n      return FileType.SOURCE;\n    case \".h\":\n      return FileType.HEADER;\n    case \".dat\":\n    case \".txt\":\n    default:\n      return FileType.TEXT;\n  }\n}\n\nfunction appendFileTypesToFilters(projectFolder: string, projectName: string) {\n  const ignoreFiles = [\n    `${projectName}.vcxproj`,\n    `${projectName}.vcxproj.filters`,\n    `${projectName}.vcxproj.user`,\n  ];\n  const codeFiles: CodeFile[] = fs\n    .readdirSync(projectFolder)\n    .filter((fileName) => !ignoreFiles.includes(fileName))\n    .map((fileName) => ({\n      fileType: getFileType(fileName),\n      fileName: fileName,\n    }));\n\n  let firstPart = \"\";\n  const filters = appendSecondPartFilter(codeFiles, firstPart);\n  const vcxproj = appendSecondPartVcxproj(codeFiles, firstPart);\n\n  fs.appendFileSync(path.join(projectFolder, `${projectName}.vcxproj.filters`), filters);\n  fs.appendFileSync(path.join(projectFolder, `${projectName}.vcxproj`), vcxproj);\n}\n\nfunction appendSecondPartFilter(codeFiles: CodeFile[], firstPart: string): string {\n  let itemGroup = \"\\n  <ItemGroup>\";\n  let compile = itemGroup;\n  let text = itemGroup;\n  let header = itemGroup;\n\n  for (let file of codeFiles) {\n    if (file) {\n      switch (file.fileType) {\n        case FileType.SOURCE:\n          compile += `\\n    <ClCompile Include=\"${file.fileName}\">\\n      <Filter>Source Files</Filter>\\n    </ClCompile>`;\n          break;\n        case FileType.TEXT:\n          text += `\\n    <Text Include=\"${file.fileName}\">\\n      <Filter>Source Files</Filter>\\n    </Text>`;\n          break;\n        case FileType.HEADER:\n          header += `\\n    <ClInclude Include=\"${file.fileName}\">\\n      <Filter>Header Files</Filter>\\n    </ClInclude>`;\n          break;\n      }\n    }\n  }\n\n  if (compile !== itemGroup) {\n    compile += \"\\n  </ItemGroup>\";\n    firstPart += compile;\n  }\n  if (text !== itemGroup) {\n    text += \"\\n  </ItemGroup>\";\n    firstPart += text;\n  }\n  if (header !== itemGroup) {\n    header += \"\\n  </ItemGroup>\";\n    firstPart += header;\n  }\n\n  firstPart += \"\\n</Project>\";\n\n  return firstPart;\n}\n\nfunction appendSecondPartVcxproj(codeFiles: CodeFile[], firstPart: string): string {\n  let itemGroup = \"\\n  <ItemGroup>\";\n  let compile = itemGroup;\n  let text = itemGroup;\n  let header = itemGroup;\n\n  for (let file of codeFiles) {\n    if (file) {\n      switch (file.fileType) {\n        case FileType.SOURCE:\n          compile += `\\n    <ClCompile Include=\"${file.fileName}\" />`;\n          break;\n        case FileType.TEXT:\n          text += `\\n    <Text Include=\"${file.fileName}\" />`;\n          break;\n        case FileType.HEADER:\n          header += `\\n    <ClInclude Include=\"${file.fileName}\" />`;\n          break;\n      }\n    }\n  }\n\n  if (compile !== itemGroup) {\n    compile += \"\\n  </ItemGroup>\";\n    firstPart += compile;\n  }\n\n  if (text !== itemGroup) {\n    text += \"\\n  </ItemGroup>\";\n    firstPart += text;\n  }\n\n  if (header !== itemGroup) {\n    header += \"\\n  </ItemGroup>\";\n    firstPart += header;\n  }\n\n  firstPart += \"\\n  <Import Project=\\\"$(VCTargetsPath)\\\\Microsoft.Cpp.targets\\\" />\\n  <ImportGroup Label=\\\"ExtensionTargets\\\">\\n  </ImportGroup>\\n</Project>\";\n\n  return firstPart;\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport { generateVSProjectFiles } from './projectGenerator';\n\nexport function activate(context: vscode.ExtensionContext) {\n\t// Register the command\n    let disposable = vscode.commands.registerCommand('extension.generateCppSolution', async () => {\n        try {\n            // Run the generateSolutionFiles function\n            generateVSProjectFiles();\n        } catch (error) {\n\t\t\t// Show an error message\n            vscode.window.showErrorMessage(`Error executing: ${error}`);\n        }\n    });\n\n\t// Register the command\n    context.subscriptions.push(disposable);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}"],"names":["FileType","replace","c","r","Math","random","toString","getFileType","fileName","path","extname","SOURCE","HEADER","TEXT","async","vscode","workspace","name","window","showErrorMessage","newName","showInputBox","prompt","value","projectDir","join","rootPath","projectFolder","fs","mkdirSync","recursive","error","projectName","templateDir","__dirname","readdirSync","forEach","file","startsWith","copyFileSync","slnFile","newFileName","renameSync","oldPath","newPath","copyFilesRename","solutionFilePath","content","readFileSync","generateGUID","writeFileSync","replaceIdsInSolutionFile","workingDir","extensions","ext","includes","unlinkSync","copyFiles","ignoreFiles","codeFiles","filter","map","fileType","filters","firstPart","itemGroup","compile","text","header","appendSecondPartFilter","vcxproj","appendSecondPartVcxproj","appendFileSync","appendFileTypesToFilters","showInformationMessage","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","disposable","commands","registerCommand","generateVSProjectFiles","subscriptions","push"],"sourceRoot":""}