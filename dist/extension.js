/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((module) => {

module.exports = require("vscode");

/***/ }),
/* 2 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateSolutionFiles = void 0;
const child_process_1 = __webpack_require__(3);
const vscode_1 = __webpack_require__(1);
function generateSolutionFiles() {
    const workspaceFolder = vscode_1.workspace.workspaceFolders?.[0];
    if (workspaceFolder) {
        // Path to the C++ file.
        const cppFilePath = vscode_1.window.activeTextEditor?.document.fileName;
        if (!cppFilePath) {
            vscode_1.window.showErrorMessage('No C++ file is currently open.');
            return;
        }
        // Path to the C++ project's .vcxproj file.
        // This is the file that will be generated by MSBuild.
        const vcxprojFilePath = workspaceFolder.uri.fsPath + '/MyCppProject.vcxproj';
        // Generate the .sln and .vcxproj files from the .cpp file.
        const msbuildProcess = (0, child_process_1.spawn)('msbuild', [cppFilePath, '/t:Build', '/p:Configuration=Debug', '/p:Platform=x64', '/p:VisualStudioVersion=16.0', '/p:VCTargetsPath=C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Microsoft\\VC\\v160\\']);
        // Handle the MSBuild process exit code.
        msbuildProcess.on('close', (code) => {
            if (code === 0) {
                vscode_1.window.showInformationMessage('C++ solution files generated successfully.');
            }
            else {
                vscode_1.window.showErrorMessage('Failed to generate C++ solution files.');
            }
        });
    }
}
exports.generateSolutionFiles = generateSolutionFiles;


/***/ }),
/* 3 */
/***/ ((module) => {

module.exports = require("child_process");

/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deactivate = exports.activate = void 0;
const vscode = __webpack_require__(1);
const generateSolution_1 = __webpack_require__(2);
function activate(context) {
    // Register the command
    let disposable = vscode.commands.registerCommand('extension.generateCppSolution', async () => {
        try {
            // Run the generateSolutionFiles function
            (0, generateSolution_1.generateSolutionFiles)();
        }
        catch (error) {
            // Show an error message
            vscode.window.showErrorMessage(`Error executing: ${error}`);
        }
    });
    // Register the command
    context.subscriptions.push(disposable);
}
exports.activate = activate;
// this method is called when your extension is deactivated
function deactivate() { }
exports.deactivate = deactivate;

})();

module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=extension.js.map